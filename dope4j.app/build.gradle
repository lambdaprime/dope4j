plugins {
  id 'com.diffplug.spotless'
}

apply plugin : 'eclipse'

dependencies {
  implementation(project ":dope4j")

  implementation("io.github.lambdaprime:depresolve:3.0-SNAPSHOT"){
    // we use slf4j-jdk14 instead of slf4j-simple
    exclude group: "org.slf4j", module: "slf4j-simple"
  }
  
  addDependencies(this, ["implementation"], "1.7.36", [
    "org.slf4j:slf4j-jdk14"
  ]);

  addDependencies(this, ["implementation", "apiElements"], "2.14.1", [
    "com.fasterxml.jackson.core:jackson-databind",
    "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml",
    "com.fasterxml.jackson.module:jackson-module-parameter-names"
  ]);
}

configurations {
  customConfig.extendsFrom implementation
}

jar {
  println configurations.customConfig
  manifest { 
    attributes 'Implementation-Version': "${rootProject.version}",
    'Main-Class': 'id.dope4j.app.DeepObjectPoseEstimationApp'
  }
}

def packageDir = "$buildDir/package/${projectName}"

ext.artifacts = fileTree(include: ['*'], dir: "$packageDir/libs")

task createRelease(type: Zip) {
  archiveFileName = "$releaseFileName"
  destinationDirectory = file("$projectDir/release")
  from file("$packageDir/..")
}

task copyLibs(type: Copy) {
  from configurations.customConfig  {
    // These are mostly dependencies which would increase release
    // package file size dramatically (onnxruntime_gpu and others).
    // Such dependencies are provided using depresolve (see Launcher.java)
    exclude group: "org.openpnp", module: "opencv"
    exclude group: "com.microsoft.onnxruntime", module: "onnxruntime_gpu"
    exclude group: "ai.djl.pytorch", module: "pytorch-native-cu117"
  }
  from jar.archiveFile
  into "${packageDir}/libs"
}

task copyConfig(type: Copy) {
  from "${project.rootDir}/config"
  into "${packageDir}/config"
}

task copyReadme(type: Copy) {
  from("../README.md")
  into("$buildDir/resources/main")
  rename ("README.md", "README-${projectName}.md")
}

// overwrite template README which comes from resources folder
jar.dependsOn copyReadme

task createPackage(type: Copy, dependsOn: [copyLibs, copyConfig]) {
  from "${project.rootDir}/README.md"
  from "${project.rootDir}/LICENSE-2.0.txt"
  from file("$projectDir/src/dope4j")
  into packageDir
}

task cleanRelease(type: Delete) {
  delete "$packageDir"
  delete "$projectDir/release"
}

createRelease.dependsOn createPackage
assemble.dependsOn createRelease
clean.dependsOn cleanRelease

// run spotless and format code before the build
classes.dependsOn spotlessApply
