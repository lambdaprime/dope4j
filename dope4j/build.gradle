// include xfunction for updateVersion
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "io.github.lambdaprime:id.xfunction:14.0"
  }
}

plugins {
  id 'com.diffplug.spotless'
}

apply plugin : 'eclipse'

dependencies {
  implementation "io.github.lambdaprime:id.xfunction:20.0-SNAPSHOT"
  implementation "io.github.lambdaprime:matcv:3.0-SNAPSHOT"
  implementation "io.github.lambdaprime:depresolve:3.0-SNAPSHOT"
  implementation "org.openpnp:opencv:4.6.0-0"

  def djlVersion = "0.20.0"
  implementation "ai.djl.pytorch:pytorch-jni:1.13.0-${djlVersion}"
  addDependencies(this, ["implementation"], djlVersion, [
    "ai.djl:api",
    "ai.djl.pytorch:pytorch-engine",
    "ai.djl.opencv:opencv"
  ]);
  implementation("ai.djl.onnxruntime:onnxruntime-engine:${djlVersion}") {
    exclude group: "com.microsoft.onnxruntime", module: "onnxruntime"
  }
  implementation "com.microsoft.onnxruntime:onnxruntime_gpu:1.12.1"
  implementation "ai.djl.pytorch:pytorch-native-cu117:1.13.0:linux-x86_64"
  
  addDependencies(this, ["implementation"], "1.7.36", [
    "org.slf4j:slf4j-api",
    "org.slf4j:slf4j-jdk14"
  ]);

}

configurations {
  customConfig.extendsFrom implementation
}

jar {
  println configurations.customConfig
  manifest { 
    attributes 'Implementation-Version': "${rootProject.version}",
    'Main-Class': 'id.dope4j.DeepObjectPoseEstimationApp'
  }
}

def packageDir = "$buildDir/package/${projectName}"

ext.artifacts = fileTree(include: ['*'], dir: "$packageDir/libs")

task createRelease(type: Zip) {
  archiveFileName = "$releaseFileName"
  destinationDirectory = file("$projectDir/release")
  from file("$packageDir/..")
}

task copyLibs(type: Copy) {
  from configurations.customConfig  {
    // These are mostly dependencies which would increase release
    // package file size dramatically (onnxruntime_gpu and others).
    // Such dependencies are provided using depresolve (see Launcher.java)
    exclude group: "org.openpnp", module: "opencv"
    exclude group: "com.microsoft.onnxruntime", module: "onnxruntime_gpu"
    exclude group: "ai.djl.pytorch", module: "pytorch-native-cu117"
  }
  from jar.archiveFile
  into "${packageDir}/libs"
}

task copyReadme(type: Copy) {
  from("../README.md")
  into("$buildDir/resources/main")
  rename ("README.md", "README-${projectName}.md")
}

// overwrite template README which comes from resources folder
jar.dependsOn copyReadme

task createPackage(type: Copy, dependsOn: copyLibs) {
  from "${project.rootDir}/README.md"
  from "${project.rootDir}/LICENSE-2.0.txt"
  from file("$projectDir/src/dope4j")
  into packageDir
}

task cleanRelease(type: Delete) {
  delete "$packageDir"
  delete "$projectDir/release"
}

createRelease.dependsOn createPackage
assemble.dependsOn createRelease
clean.dependsOn cleanRelease

// run spotless and format code before the build
classes.dependsOn spotlessApply
