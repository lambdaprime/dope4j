// include xfunction for updateVersion
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "io.github.lambdaprime:id.xfunction:14.0"
  }
}

plugins {
  id 'com.diffplug.spotless'
}

apply plugin : 'eclipse'

dependencies {
  addDependencies(this, ["implementation", "apiElements"], "21.0-SNAPSHOT", [
    "io.github.lambdaprime:id.xfunction",
  ]);
  addDependencies(this, ["implementation", "apiElements"], "3.0-SNAPSHOT", [
    "io.github.lambdaprime:matcv",
  ]);
  addDependencies(this, ["implementation", "apiElements"], "4.6.0-0", [
    "org.openpnp:opencv",
  ]);

  def djlVersion = "0.20.0"
  addDependencies(this, ["implementation", "apiElements"], "1.13.0-${djlVersion}", [
    "ai.djl.pytorch:pytorch-jni",
  ]);
  addDependencies(this, ["implementation", "apiElements"], djlVersion, [
    "ai.djl:api",
    "ai.djl.pytorch:pytorch-engine",
    "ai.djl.opencv:opencv"
  ]);
  implementation("ai.djl.onnxruntime:onnxruntime-engine:${djlVersion}") {
    exclude group: "com.microsoft.onnxruntime", module: "onnxruntime"
  }
  addDependencies(this, ["implementation", "apiElements"], "1.12.1", [
    "com.microsoft.onnxruntime:onnxruntime_gpu"
  ]);
  addDependencies(this, ["implementation", "apiElements"], "1.13.0:linux-x86_64", [
    "ai.djl.pytorch:pytorch-native-cu117"
  ]);  
  addDependencies(this, ["implementation", "apiElements"], "1.7.36", [
    "org.slf4j:slf4j-api",
  ]);
  addDependencies(this, ["implementation", "apiElements"], "1.22.0", [
    "io.opentelemetry:opentelemetry-api",
  ]);

}

jar {
  manifest { 
    attributes 'Implementation-Version': "${rootProject.version}"
  }
}

task createRelease(type: Copy) {
    def out = 'release'
    from jar.archiveFile
    into out
}

task cleanRelease(type: Delete) {
    delete "$projectDir/release"
}

assemble.dependsOn createRelease
clean.dependsOn cleanRelease

// run spotless and format code before the build
classes.dependsOn spotlessApply
