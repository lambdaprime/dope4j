// include xfunction for updateVersion
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.github.lambdaprime:id.xfunction:14.0"
    }
}

plugins {
    id 'com.diffplug.spotless'
}

apply plugin : 'eclipse'

dependencies {
    implementation "com.microsoft.onnxruntime:onnxruntime_gpu:1.12.1"
    implementation "ai.djl.pytorch:pytorch-native-cu117:1.13.0:linux-x86_64"

    def slf4jVersion = "1.7.36"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.slf4j:slf4j-jdk14:${slf4jVersion}"
    implementation 'io.github.lambdaprime:id.xfunction:20.0-SNAPSHOT'
    implementation 'io.github.lambdaprime:matcv:3.0-SNAPSHOT'

    def djlVersion = "0.20.0"
    implementation "ai.djl:api:${djlVersion}"
    implementation "ai.djl.pytorch:pytorch-engine:${djlVersion}"
    implementation "ai.djl.pytorch:pytorch-jni:1.13.0-${djlVersion}"
    implementation("ai.djl.onnxruntime:onnxruntime-engine:${djlVersion}") {
        exclude group: "com.microsoft.onnxruntime", module: "onnxruntime"
    }
    implementation "ai.djl.opencv:opencv:${djlVersion}"

    implementation "org.openpnp:opencv:4.6.0-0"
}

configurations {
    customConfig.extendsFrom implementation
}

jar {
    println configurations.customConfig
    manifest { 
        attributes 'Implementation-Version': "${rootProject.version}",
        'Main-Class': 'id.dope4j.DeepObjectPoseEstimationApp'
    }
}

def packageDir = "$buildDir/package/${projectName}"

ext.artifacts = fileTree(include: ['*'], dir: "$packageDir/libs")

task createRelease(type: Zip) {
    archiveFileName = "$releaseFileName"
    destinationDirectory = file("$projectDir/release")
    from file("$packageDir/..")
}

task copyLibs(type: Copy) {
    from configurations.customConfig
    from jar.archiveFile
    into "${packageDir}/libs"
}

task copyReadme(type: Copy) {
    from("../README.md")
    into("$buildDir/resources/main")
    rename ("README.md", "README-${projectName}.md")
}

task createPackage(type: Copy, dependsOn: copyLibs) {
    from "${project.rootDir}/README.md"
    from "${project.rootDir}/LICENSE-2.0.txt"
    into packageDir
}

task cleanRelease(type: Delete) {
    delete "$packageDir"
    delete "$projectDir/release"
}

compileJava.dependsOn copyReadme
createRelease.dependsOn createPackage
assemble.dependsOn createRelease
clean.dependsOn cleanRelease
processResources.dependsOn copyReadme

// run spotless and format code before the build
classes.dependsOn spotlessApply
